services:
  # ============================================
  # INFRASTRUCTURE SERVICES
  # ============================================
  
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - ecommerce-network

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: ecommerce-rabbitmq
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MGMT_PORT}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecommerce-network

  kafka:
    image: apache/kafka:3.7.0
    container_name: ecommerce-kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_CONTROLLER_LISTENER_NAMES}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CONTROLLER_QUORUM_VOTERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 --version 2>/dev/null" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ecommerce-network

  # ============================================
  # SERVICE DISCOVERY & CONFIGURATION
  # ============================================

  eureka-server:
    build:
      context: ../../eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "${EUREKA_SERVER_PORT}:8761"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  config-server:
    extends:
      file: common-config.yml
      service: config-server-base
    build:
      context: ../../config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "${CONFIG_SERVER_PORT}:8071"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  api-gateway:
    extends:
      file: common-config.yml
      service: gateway-base
    build:
      context: ../../api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT}:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # MICROSERVICES
  # ============================================

  user-service:
    extends:
      file: common-config.yml
      service: microservice-with-redis-jwt
    build:
      context: ../../user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:5432/${USER_SERVICE_DB}
      # User Service specific configs
      TOKEN_BLACKLIST_PREFIX: ${TOKEN_BLACKLIST_PREFIX}
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH}
      PASSWORD_REQUIRE_UPPERCASE: ${PASSWORD_REQUIRE_UPPERCASE}
      PASSWORD_REQUIRE_LOWERCASE: ${PASSWORD_REQUIRE_LOWERCASE}
      PASSWORD_REQUIRE_DIGIT: ${PASSWORD_REQUIRE_DIGIT}
      PASSWORD_REQUIRE_SPECIAL: ${PASSWORD_REQUIRE_SPECIAL}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED}
      LOGIN_RATE_LIMIT: ${LOGIN_RATE_LIMIT}
      REGISTRATION_RATE_LIMIT: ${REGISTRATION_RATE_LIMIT}
      GENERAL_RATE_LIMIT: ${GENERAL_RATE_LIMIT}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT}
      MAX_CONCURRENT_SESSIONS: ${MAX_CONCURRENT_SESSIONS}
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8081/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  product-catalog-service:
    extends:
      file: common-config.yml
      service: microservice-base
    build:
      context: ../../product-catalog-service
      dockerfile: Dockerfile
    container_name: product-catalog-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:5432/${PRODUCT_CATALOG_DB}
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8082/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  shopping-cart-service:
    extends:
      file: common-config.yml
      service: microservice-with-redis
    build:
      context: ../../shopping-cart-service
      dockerfile: Dockerfile
    container_name: shopping-cart-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:5432/${SHOPPING_CART_DB}
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8083/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  order-service:
    extends:
      file: common-config.yml
      service: microservice-base
    build:
      context: ../../order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:5432/${ORDER_SERVICE_DB}
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8084/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  payment-service:
    extends:
      file: common-config.yml
      service: microservice-with-jwt
    build:
      context: ../../payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:5432/${PAYMENT_SERVICE_DB}
      # Payment specific configs
      STRIPE_ENABLED: ${STRIPE_ENABLED}
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_API_VERSION: ${STRIPE_API_VERSION}
      STRIPE_SUCCESS_URL: ${STRIPE_SUCCESS_URL}
      STRIPE_CANCEL_URL: ${STRIPE_CANCEL_URL}
      PAYMENT_TIMEOUT: ${PAYMENT_TIMEOUT}
      PAYMENT_RETRY_ATTEMPTS: ${PAYMENT_RETRY_ATTEMPTS}
      PAYMENT_RETRY_DELAY: ${PAYMENT_RETRY_DELAY}
      PAYMENT_ENCRYPTION_KEY: ${PAYMENT_ENCRYPTION_KEY}
      WEBHOOK_TIMEOUT: ${WEBHOOK_TIMEOUT}
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8085/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  notification-service:
    extends:
      file: common-config.yml
      service: microservice-base
    build:
      context: ../../notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:5432/${NOTIFICATION_SERVICE_DB}
      # Notification specific configs
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8086/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ============================================
# VOLUMES
# ============================================
volumes:
  postgres_data:

# ============================================
# NETWORKS
# ============================================
networks:
  ecommerce-network:
    driver: bridge
